plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.12.0'
    id 'io.freefair.lombok' version '8.13.1'
    id 'com.github.ben-manes.versions' version '0.52.0'
}

repositories {
    mavenCentral()
}

dependencyUpdates {
    resolutionStrategy {
        componentSelection {
            all { ComponentSelection selection ->
                def unstableKeywords = ['alpha', 'beta', 'rc', 'm', 'snapshot']
                boolean isUnstable = unstableKeywords.any { keyword ->
                    selection.candidate.version.toLowerCase().contains(keyword)
                }
                if (isUnstable) {
                    selection.reject("Unstable version: ${selection.candidate.version}")
                }
            }
        }
    }
}

def restAssuredVersion = "5.5.5",
    allureVersion = "2.29.0",
    selenideVersion = "7.9.3"

allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

dependencies {
    testImplementation(
            "io.rest-assured:rest-assured:$restAssuredVersion",
            "io.rest-assured:json-schema-validator:$restAssuredVersion",
            'com.fasterxml.jackson.core:jackson-core:2.19.0',
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            'commons-codec:commons-codec:1.18.0',
            'org.junit.jupiter:junit-jupiter:5.13.0',
            'org.junit.platform:junit-platform-launcher:1.13.0',
            "org.assertj:assertj-core:3.27.3",
            'org.slf4j:slf4j-simple:2.0.17',
            "com.codeborne:selenide:$selenideVersion"
    )
}

tasks.withType(Test).configureEach {
    systemProperties(System.getProperties())
    useJUnitPlatform()
    systemProperty "USERNAME", System.getProperty("USERNAME", "")
    systemProperty "PASSWORD", System.getProperty("PASSWORD", "")
    systemProperty "BOOKISBN", System.getProperty("BOOKISBN", "")
    def threads = System.getProperty("threads", "1").toInteger()
    systemProperties += [
            'junit.jupiter.execution.parallel.enabled': true,
            'junit.jupiter.execution.parallel.mode.default': 'concurrent',
            'junit.jupiter.execution.parallel.mode.classes.default': 'concurrent',
            'junit.jupiter.execution.parallel.config.strategy': 'fixed',
            'junit.jupiter.execution.parallel.config.fixed.parallelism': threads
    ]

    // Добавляем параллелизм на уровне Gradle
    maxParallelForks = threads > 1 ? threads : 1

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}